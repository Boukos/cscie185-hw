Assignment ! - Alexandre de Melo Correia Pinto

Problem 1. When you open R Studio, go to the text editor in the top left corner first.Type all commands in the text editor. Execute one or several commands by highlightingthose commands, holding Ctrl key and hitting Return button. In that way you arepreserving your work as a script. You are advised to read help pages for all R functionsyou will use.a) Ask the system for the current working directory. On your operating system,create a special directory for work with R, something like C:\Code\R or/code/R. Make that directory both readable and writable.

> getwd()[1] "/Users/alexcp/Dropbox/Courses"
b) Change your working directory to the new directory using appropriate R function.Copy the attached file Smokers.txt to your new directory.> setwd("/Users/alexcp/Dropbox/Courses/Harvard/cscie185-hw/Assign01")> getwd()[1] "/Users/alexcp/Dropbox/Courses/Harvard/cscie185-hw/Assign01"c) Create a vector vv with elements which repeat numbers 1,2,3 five times, usingfunctions rep() and c(). What is the length of you vector. Do not just tell us,please as R to tell you the length. Save that vector into a file in your workingdirectory using function save(). Initially, name your file vv.RData. Try toopen the file with an editor like Vim or notepad. Please do not change anythingin the file.

> vv <- c(rep(1,5), rep(2,5), rep(3,5))> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3> length(vv)[1] 15
> save("vv", file = "vv.RData")
$ cat vv.RData 
?
r?0??b```b`?bf ??	H02?0p???ʀ$??`B??4q4??x?S?$
d) Save your vector vv into another file, called vv.txt. This time turn the asciiparameter of save() function to TRUE. Try reading your file. Could you do itthis time?

> save("vv", file = "vv.txt", ascii = TRUE)
$ cat vv.txt
RDA2
A
2
134914
131840
1026
1
262153
2
vv
14
15
1
1
1
1
1
2
2
2
2
2
3
3
3
3
3
254

e) Use R function list.files() to list the content of your working directory.

> list.files()[1] "e185_Assign01_Intro_to_R.pdf"            [2] "E185_DeMeloCorreiaPintoAlexandreHW01.txt"[3] "Smokers.txt"                             [4] "vv.RData"                                [5] "vv.txt" 
f) Point function list.files() to any other directory and assign its result to avariable. What is the class of that variable? (Hint, use function class()). Whatis the structure of variable vv. (Hint, use function str()). What is the mode ofvariable vv. (Hint, use function mode()).

> file_list = list.files(path = "/Users/alexcp/Dropbox/Courses/Harvard")> file_list[1] "Add Course.pdf"               "cscie185-hw"                 [3] "New Student.pdf"              "Syllabus_E185_Spring2013.pdf"> class(file_list)[1] "character"> str(vv) num [1:15] 1 1 1 1 1 2 2 2 2 2 ...> mode(vv)[1] "numeric"
g) Remove variable vv from your workspace. Next, load that variable from filevv.RData. Verify that you got whatever you stored.

> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3> rm(vv)> vvError: object 'vv' not found> load("vv.RData")> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3
h) Remove variable vv from your workspace, again. This time, load that variablefrom file vv.txt. Again, verify that you have recovered your variable.

> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3> rm(vv)> vvError: object 'vv' not found> load("vv.txt")> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3
i) Save the content of your text editor as a file with extension R. You can rerun allcommands in that file as a script, if you want, one day. You might want to edit thefile first, but that is another matter. Provide that file as a part of your submission.

Saved as Problem1.R
j) Close R Studio. Do not forget to save your workspace. Restart R Studio.Convince yourself that all of your variables are there.

[Workspace loaded from ~/Dropbox/Courses/Harvard/cscie185-hw/Assign01/.RData]> vv [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3> file_list[1] "Add Course.pdf"               "cscie185-hw"                 [3] "New Student.pdf"              "Syllabus_E185_Spring2013.pdf"

-----------------------------------------------

Problem 2. Create a vector num of numbers with 8 randomly ordered values between 1and 20. Use c() function.a) Turn that vector into another vector of characters cnum using functionas.character().

> sample(20, 8)[1]  2 16 14  5  1 19 18 15> num <- c(2, 16, 14,  5,  1, 19, 18, 15)> num[1]  2 16 14  5  1 19 18 15> cnum <- as.character(num)> cnum[1] "2"  "16" "14" "5"  "1"  "19" "18" "15"
b) Calculate minimum, maximum and mean value of two vectors.

> min(num)[1] 1> max(num)[1] 19> mean(num)[1] 11.25> min(cnum)[1] "1"> max(cnum)[1] "5"> mean(cnum)[1] NAWarning message:In mean.default(cnum) : argument is not numeric or logical: returning NA
c) Transform vector cnum back into numbers using function as.numeric().Verify that you got numbers back.

> cnum <- as.numeric(cnum)> cnum[1]  2 16 14  5  1 19 18 15
d) Create another vector snum by selecting only those numbers from vector numwhich are greater than 10.

> snum <- cnum[cnum>10]> snum[1] 16 14 19 18 15
e) Create a logical vector lnum which will tell you whether an entry in vector cnumis greater than 10.

> lnum <- cnum>10> lnum[1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUEf) Set 3rd element of vector cnum to NA. Recreate logical vector lnum and reportits elements. Recreate vector snum by selecting those elements of vector cnumwhich are greater than 10. What was the effect of NA.

> cnum[3] <- NA> cnum[1]  2 16 NA  5  1 19 18 15> lnum <- cnum>10> lnum[1] FALSE  TRUE    NA FALSE FALSE  TRUE  TRUE  TRUE
> snum <- cnum[cnum>10]> snum[1] 16 NA 19 18 15

The NA propagates on the operations performed, to help reinforce that the observation is inexistent and should not be ignored.
g) Create a character vector cdate with three dates between January 01, 2013 andMarch 01, 2013. As the format for character representation of dates use “January-01-2013”. Transform that vector into vector ddate of Dates class using functionas.Date() and format "%B-%d-%Y". Please read help for as.Dates(). Whatare the class and mode of vector ddate. Display values of vector ddate. Sortvalues in vector ddate. Provide the information on the order that sortingimposed, in other words ask R to tell once sorted which elements came first,which second, and so on.

> cdate <- c("January-20-2013", "February-25-2013", "February-09-2013")> cdate[1] "January-20-2013"  "February-25-2013" "February-09-2013"> ddate <- as.Date(cdate, format="%B-%d-%Y")
> class(ddate)[1] "Date"> mode(ddate)[1] "numeric"> ddate[1] "2013-01-20" "2013-02-25" "2013-02-09"
> sort(ddate)[1] "2013-01-20" "2013-02-09" "2013-02-25"
> order(ddate)[1] 1 3 2

-----------------------------------------------
Problem 3. Create matrix A with 3 rows and 4 columns. Use small integer valuesbetween -3 and 3 for elements of matrix A.
a) Create new matrix B obtained by subtracting -1 from all elements of matrix A.> X <- c(-3, -2, -3,  0,  3, -2,  3, -1, -1,  2,  3, -1)> X [1] -3 -2 -3  0  3 -2  3 -1 -1  2  3 -1
> A <- matrix(X, nrow=3, ncol=4)> A     [,1] [,2] [,3] [,4][1,]   -3    0    3    2[2,]   -2    3   -1    3[3,]   -3   -2   -1   -1
> B <- A - 1> B     [,1] [,2] [,3] [,4][1,]   -4   -1    2    1[2,]   -3    2   -2    2[3,]   -4   -3   -2   -2b) Create new matrix C obtained by multiplying by 2 all elements of matrix A.
> C <- 2 * A> C     [,1] [,2] [,3] [,4][1,]   -6    0    6    4[2,]   -4    6   -2    6[3,]   -6   -4   -2   -2
c) Create matric TA which is a transpose of A.
> TA <- t(A)> TA     [,1] [,2] [,3][1,]   -3   -2   -3[2,]    0    3   -2[3,]    3   -1   -1[4,]    2    3   -1
d) Calculate matrix ATA which is a matrix product of matrix A multiplied by matrixTA from the right. Ask R to tell you dimensions of matrix ATA.
> ATA <- A %*% TA> ATA     [,1] [,2] [,3][1,]   22    9    4[2,]    9   23   -2[3,]    4   -2   15> dim(ATA)[1] 3 3
e) Calculate matrix TAA whish is a matrix product of matrix TA multiplied bymatrix A from the right. Ask R to tell you dimensions of matrix TAA.

> TAA <- TA %*% A> TAA     [,1] [,2] [,3] [,4][1,]   22    0   -4   -9[2,]    0   13   -1   11[3,]   -4   -1   11    4[4,]   -9   11    4   14> dim(TAA)[1] 4 4
f) Determine matrix AAT which is an inverse of matrix TAA. Prove that AATmultiplied by TAA produces a unit matrix. Unit matrix has all elements on thediagonal equal to 1 and all other elements equal to 0.
> AAT <- solve(TAA)Error in solve.default(TAA) :   system is computationally singular: reciprocal condition number = 2.30319e-18

Since the matrix has a determinant ~ 0, I will change one of the indexes to make it invertible

> TAA[3,2] = 8> AAT <- solve(TAA)> AAT            [,1]       [,2]        [,3]       [,4][1,]  0.12279238 -0.1492143 -0.04491726  0.2090113[2,] -0.12418301  0.3071895  0.11111111 -0.3529412[3,]  0.07898762 -0.1729940  0.04018913  0.1752190[4,]  0.15394243 -0.2878598 -0.12765957  0.4330413> I <- AAT %*% TAA> I              [,1]          [,2]         [,3]          [,4][1,]  1.000000e+00 -4.440892e-16 0.000000e+00  0.000000e+00[2,] -4.440892e-16  1.000000e+00 2.220446e-16  8.881784e-16[3,]  2.220446e-16 -2.220446e-16 1.000000e+00 -4.440892e-16[4,]  0.000000e+00 -8.881784e-16 2.220446e-16  1.000000e+00> round(I)     [,1] [,2] [,3] [,4][1,]    1    0    0    0[2,]    0    1    0    0[3,]    0    0    1    0[4,]    0    0    0    1

-----------------------------------------------
Problem 4. Load data in attached file Smokers.txt into variable smokers usingfunction read.delim(). Use parameters header=TRUE, instructing R to readcolumn header names from the first row of the file, and sep=”\t”, telling R that file istab delimited. As a side note, parameter header=TRUE works only if the first row ofthe data file has one element fewer than the rest of the file.
a) What are the class, mode and str(ucture) of variable smokers.> smokers <- read.delim("Smokers.txt", header = TRUE, sep="\t")> class(smokers)[1] "data.frame"> mode(smokers)[1] "list"> str(smokers)'data.frame':	48 obs. of  4 variables: $ Country      : Factor w/ 48 levels "Afghanistan",..: 13 26 10 40 5 4 18 27 3 24 ... $ PercentSmokes: int  40 37 37 37 37 37 36 36 36 36 ... $ GDPPerCapita : Factor w/ 42 levels "1,000","1,100",..: 24 20 8 7 36 14 18 12 32 22 ... $ GDPRank      : int  146 49 78 82 106 174 55 64 113 148 ...
b) What are the dimensions of variable smokers.

> dim(smokers)[1] 48  4
c) What are the labels (names of horizontal rows) of variable smokers.
> labels(smokers)[[1]] [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13"[14] "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26"[27] "27" "28" "29" "30" "31" "32" "33" "34" "35" "36" "37" "38" "39"[40] "40" "41" "42" "43" "44" "45" "46" "47" "48"[[2]][1] "Country"       "PercentSmokes" "GDPPerCapita"  "GDPRank"      > labels(smokers)[[2]][1] "Country"       "PercentSmokes" "GDPPerCapita"  "GDPRank"

d) List values in individual columns of variable smokers.

> smokers             Country PercentSmokes GDPPerCapita GDPRank1               Cuba            40        4,000     1462             Kuwait            37       23,100      493              Chile            37       12,700      784             Russia            37       12,200      825            Belarus            37        8,100     1066         Bangladesh            37        2,300     1747            Estonia            36       20,300      558             Latvia            36       16,000      649         Azerbaijan            36        7,500     11310         Indonesia            36        3,900     14811        Kazakhstan            35        9,400      9012         Lithuania            34       15,300      6613         Argentina            33       15,200      6714             China            33        7,700     10915           Ukraine            32        7,800     10816           Vietnam            32        3,100     16017            Cyprus            31       23,000      5018          Slovakia            31       18,200      6119        Mauritania            31        2,600     16920       SouthAfrica            30       13,300      7621           Burundi            30          700     22422           Nigeria             6        1,500     19823        ElSalvador             8        4,900     13324             Ghana             8        2,700     16725       Afghanistan             9          800     22126          Ethiopia             9        1,000     21127              Peru            10        6,600     11928         Nicaragua            10        3,100     15929              Togo            10        1,700     19130          SriLanka            11        4,700     13831           Ecuador            11        4,500     14132             Niger            11        1,000     21533            Panama            12        8,200     10434          Cameroon            12        2,400     17235 DominicanRepublic            12        8,400     10236         Guatemala            12        5,000     13037           Bolivia            13        3,100     15738             Nepal            14        1,500     19739          Honduras            14        3,100     15840        Tajikistan            14        1,300     20541              Mali            14        1,300     20342        Madagascar            14          900     21843             Benin            14        1,100     20944            Uganda            15        1,900     18645          Paraguay            15        4,800     13646          HongKong            15       37,300      1447            Malawi            15          600     22948          Colombia            15        8,600      99

e) You have noticed that R interpreted column GDPPerCapita as a factor, i.e. alow cardinality column that could be represented by a small number of levels. Rmade a mistake and we want that column to be a set of integers just like columnGDPRank. You can remove factors from column GDPPerCapita by usingfunction droplevels(). Verify that offending factor is gone by redisplayingthe structure of variable smokers.

droplevels() does not seem to work. Accomplished the objective by doing the following.

> smokers$GDPPerCapita <- as.numeric(gsub(",","",smokers$GDPPerCapita))> str(smokers)'data.frame':	48 obs. of  4 variables: $ Country      : Factor w/ 48 levels "Afghanistan",..: 13 26 10 40 5 4 18 27 3 24 ... $ PercentSmokes: int  40 37 37 37 37 37 36 36 36 36 ... $ GDPPerCapita : num  4000 23100 12700 12200 8100 2300 20300 16000 7500 3900 ... $ GDPRank      : int  146 49 78 82 106 174 55 64 113 148 ...
f) Display columns PercentSmokers and GDPPerCapita using bracketnotation or [, index] selection.

> smokers[,c("PercentSmokes", "GDPPerCapita")]   PercentSmokes GDPPerCapita1             40         40002             37        231003             37        127004             37        122005             37         81006             37         23007             36        203008             36        160009             36         750010            36         390011            35         940012            34        1530013            33        1520014            33         770015            32         780016            32         310017            31        2300018            31        1820019            31         260020            30        1330021            30          70022             6         150023             8         490024             8         270025             9          80026             9         100027            10         660028            10         310029            10         170030            11         470031            11         450032            11         100033            12         820034            12         240035            12         840036            12         500037            13         310038            14         150039            14         310040            14         130041            14         130042            14          90043            14         110044            15         190045            15         480046            15        3730047            15          60048            15         8600

g) Use function plot to try to understand whether there is any correlation betweenvariables PercentSmokers (that is the number of people of a country who smoke)and its Gross Domestic product Per Capita. We are just practicing syntax. Theremay not be any correlation. Please label horizontal and vertical axis and place atitle on top of the graph. Represent points on the graph with circles.

plot(smokers$PercentSmokes, smokers$GDPPerCapita, xlab = "Percent of Smokers", ylab = "GDP Per Capita", main = "Percent of Smokers X GDP Per Capita")

Rplot_Problem4g.png
h) Create a histogram displaying the number of countries in GDPPerCapitabrackets 0 to 2,000, 2,000 to 3,000, 3,000 to 5,000, 5,000 to 10,000 and 10,000 to50,000. Label your histogram. Paint the title in purple color.

bps <- c(0, 2000, 3000, 5000, 10000, 50000)
hist(smokers$GDPPerCapita, breaks=bps, main="Histogram of GDP Per Capita", xlab="GDP Per Capita", col.main = "purple")

Rplot_Problem4h.png
i) Present the same histogram as a pie chart.


